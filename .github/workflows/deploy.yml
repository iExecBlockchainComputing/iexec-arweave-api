name: Deploy Docker Container

on:
  push:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  build:
    uses: iExecBlockchainComputing/github-actions-workflows/.github/workflows/docker-build.yml@docker-build-v2.2.0
    with:
      dockerfile: 'Dockerfile'
      # With tag
      image-tag: 'arweave-api:${{ github.sha }}'
      hadolint: false
      security-scan: false
      push: true
      registry: 'regis.iex.ec'
    secrets:
      username: ${{ secrets.regis_user }}
      password: ${{ secrets.regis_password }}
  deploy:
    runs-on:
      group: Azure_runners
    needs: build
    steps:
      - name: Azure login
        uses: azure/login@v2
        with:
          auth-type: IDENTITY
          tenant-id: ${{ secrets.AZURE_MCA_TENANT_ID }}
          allow-no-subscriptions: true

      - name: Get SSH key from Azure Key Vault and set env var
        id: fetch-secret
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            set -euo pipefail

            RAW_KEY=$(az keyvault secret show \
              --vault-name kv-iexec-github-actions \
              --name githubactionsrunners-sshkey \
              --query value -o tsv)

            echo "::add-mask::$RAW_KEY"

            echo "SSH_KEY<<GITHUB_ENV_DELIMITER_12345" >> $GITHUB_ENV
            echo "$RAW_KEY"                     >> $GITHUB_ENV
            echo "GITHUB_ENV_DELIMITER_12345"   >> $GITHUB_ENV

      - name: Setup SSH agent
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Ensure known hosts
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KNOWN_HOSTS }}" >> ~/.ssh/known_hosts

      - name: Copy docker-compose.yml to remote server
        uses: appleboy/scp-action@v0.1.6
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "docker-compose.yml"
          target: "~/deploy/" # Check the path

      - name: Run Docker Compose on remote server
        run: |
          ssh -o StrictHostKeyChecking=no "${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}" << 'EOF'
            cd ~/deploy  # Check the path
            docker compose pull
            docker compose up -d
          EOF
